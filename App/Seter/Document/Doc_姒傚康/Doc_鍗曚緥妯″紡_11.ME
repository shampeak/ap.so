##什么是单例模式

###单例模式（Singleton Pattern 单件模式或单元素模式）

单例模式，顾名思义就是只需要只有一个实例化对象，而且自行实例化并向整个系统提供这个实例。在软件的设计中，单例模式是非常常用的。实例化一次，节省了大量的资源，而且单例模式在一定程度上可以替换类中引入全局变量而导致的bug。因为全局变量将类捆绑于特定的环境中。破坏了封装，这样的类很难被其他的应用程序所通用。使用单例模式则能够将类更好的组织，并且复用。

单例模式是一种常见的设计模式，在计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。

###单例模式有以下3个特点：

- 只能有一个实例。
- 必须自行创建这个实例。
- 必须给其他对象提供这一实例。

##单例模式什么样子的

我们通过一小段代码,来看一下,什么是单例模式

    <?php
    //<pre>===============================================
	class Preference{
	    private $props = array();
	    public static $instance;
	    private function __construct(){}
	    public static function getInstance(){
	        !(self::$instance instanceof self)&&self::$instance = new Preference();
	        //empty(self::$instance) && self::$instance = new Preference();
	        return self::$instance;
	    }
	    private function __clone(){}
	    public function setProperty($key,$val){
	        $this->props[$key] = $val;
	    }
	    public function getProperty($key){
	        return $this->props[$key];
	    }
	}
	$pre = Preference::getInstance();
	$pre->setProperty('name','乔布斯');
	$pre2 = Preference::getInstance();
	print $pre2->getProperty('name');
	//=============================================</pre>
	?>

说明

在这个系统中,

- 构造方法是private,不能被实例化
- 可以用静态方法getInstance间接实例化对象(方法内部实例化本类，并返回该实例)
- 克隆方法private,不能被克隆
- instance属性 private的,不能在外部访问,
- getInstance方法可以访问到instance属性,
- getInstance方法是public static 可以在任何地方被调用.
- 只有一个实例

##单例模式作用范围


- php的应用主要用于数据库，所以一个应用中会存在大量的数据库操作，使用单例模式，则可以避免大量new操作消耗的资源
- 如果系统中需要一个类来全局控制某些配置信息，那么使用单例模式可以很方便的实现。参照ZF的FrontController部分
-  在一个页面请求汇总，便于进行调试，因为所有的代码都集中在一个类中，我们可以在类中设置钩子，输出日志，从而避免到处var_dump，echo。

后面我们来学习,怎么用单例模式建立数据库对象,全局配置对象,日志对象,debug对象